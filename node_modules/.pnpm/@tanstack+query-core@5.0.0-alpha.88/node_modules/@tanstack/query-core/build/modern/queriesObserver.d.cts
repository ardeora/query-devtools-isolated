import { a7 as QueryObserverResult, b as QueryClient, B as QueryObserverOptions, aA as NotifyOptions, j as Query, p as QueryKey, c as QueryObserver } from './queryClient-4ba6364e.js';
import { Subscribable } from './subscribable.cjs';
import './removable.cjs';

type QueriesObserverListener = (result: QueryObserverResult[]) => void;
interface QueriesObserverOptions<TCombinedResult = QueryObserverResult[]> {
    combine?: (result: QueryObserverResult[]) => TCombinedResult;
}
declare class QueriesObserver<TCombinedResult = QueryObserverResult[]> extends Subscribable<QueriesObserverListener> {
    #private;
    constructor(client: QueryClient, queries: QueryObserverOptions[], options?: QueriesObserverOptions<TCombinedResult>);
    protected onSubscribe(): void;
    protected onUnsubscribe(): void;
    destroy(): void;
    setQueries(queries: QueryObserverOptions[], options?: QueriesObserverOptions<TCombinedResult>, notifyOptions?: NotifyOptions): void;
    getCurrentResult(): TCombinedResult;
    getQueries(): Query<unknown, Error, unknown, QueryKey>[];
    getObservers(): QueryObserver<unknown, Error, unknown, unknown, QueryKey>[];
    getOptimisticResult(queries: QueryObserverOptions[]): [
        rawResult: QueryObserverResult[],
        combineResult: (r?: QueryObserverResult[]) => TCombinedResult,
        trackResult: () => QueryObserverResult[]
    ];
}

export { QueriesObserver, QueriesObserverOptions };
